# Initial state, ordered by [sphere x, sphere y, box x, box y, box theta]
q_init: [1.3, 0.0, 0.0, 0.0, 0.0]
v_init: [0.0, 0.0, 0.0, 0.0, 0.0]

# Target state.
q_nom_start: [0.0, 0.0, 0.0, 1.5, 0.0]
q_nom_end: [0.0, 1.5, 0.0, 1.5, 0.0]
q_nom_relative_to_q_init: [false, false, false, false, false]

# Initial guess. The initial sequence of generalized positions is generated by
# linearly interpolating between q_init and q_guess.
q_guess: [1.3, 0.5, 0.0, 1.5, 0.0]

# Cost weights. These define diagonal matrices, again with the ordering
# [sphere x, sphere y, box x, box y, box theta]
Qq: [1e-2, 1e-2, 1e-1, 1e-1, 0]
Qv: [5e-1, 5e-1, 1e-1, 1e-1, 1e-1]
R: [0.1, 0.1, 1e3, 1e3, 1e3]

Qfq: [0, 0, 10, 10, 0]
Qfv: [1.0, 1.0, 1.0, 1.0, 1.0]

# Problem definition parameters
time_step : 0.05    # Discretization timestep (seconds)
num_steps : 40      # number of timesteps

# Solver parameters
max_iters : 500             # maximum Gauss-Newton iterations
method : "trust_region"     # solver method, {linesearch, trust_region}
#linesearch : "backtracking" # linesearch strategy, {armino, backtracking}
scaling : true
equality_constraints : true
num_threads : 4

tolerances:
  rel_cost_reduction: 0
  abs_cost_reduction: 0
  rel_gradient_along_dq: 0
  abs_gradient_along_dq: 0
  rel_state_change: 0
  abs_state_change: 0

#linear_solver : "pentadiagonal_lu"

# Method used to compute gradients of inverse dynamics, one of
# {forward_differences, central_differences, central_differences4, autodiff}
gradients_method: "forward_differences"

# Playback/visualization parameters
play_target_trajectory : false
play_initial_guess : true
play_optimal_trajectory : true

# Debugging parameters
linesearch_plot_every_iteration : false
print_debug_data : false
save_solver_stats_csv : true

# Contact model parameters.
contact_stiffness : 100     # normal force stiffness, in N/m
dissipation_velocity : 0.1  # Hunt & Crossley-like model parameter, in m/s.

# Amount of smoothing (and therefore force at a distance) to apply when
# computing normal forces. This is equivalent to an analytical version of
# randomized smoothing, assuming that signed distances are drawn from a logistic
# distirbution with the smoothing factor as the scale parameter. Higher values
# mean more smoothing and more force at a distance.
smoothing_factor : 0.001

# Friction
friction_coefficient : 0.8  # Coefficient of friction.
stiction_velocity: 0.05     # Regularization velocity, in m/s.

# MPC parameters
mpc : true
mpc_iters : 1
controller_frequency : 200.0
sim_time : 10
sim_time_step : 1e-3
sim_realtime_rate : 0.0
feed_forward : true
Kp : [10,10,0,0,0]
Kd : [1,1,0,0,0]

save_mpc_result_as_static_html: true
static_html_filename: "/home/manabu-nishiura/idto/results.html"
